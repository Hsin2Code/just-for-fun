* 算法（algorithms）	
质变算法：会改变操作对象之值
非质变算法：和质变算法相反

** 数值算法
*** accumulate

accumulate用来计算init和[first, last)内所有元素的总和。
result = sum(#first, #last)
#+BEGIN_SRC C++
  template<class InputIterator, class T>
  T accumulate(InputIterator first, InputIterator last, T init)
  {
      for( ; first != last; ++first)
          init = init + *first;
      return init;
  }
  template<class InputIterator,class T, class BinaryOperation>
  T accumulate(InputIterator first, InputIterator last, T init, BinaryOperation binary_op)
  {
      for( ; first != last; ++first)
          init = binary_op(init, *first);
      return init;
  }
#+END_SRC
*** adjacent_difference

#n = #n - #n-1
#+BEGIN_SRC C++
  template<class InputIterator, class OutputIterator>
  OutputIterator adjacent_difference(InputIterator first, InputIterator last,
                                     OutputIterator result)
  {
      if(first == last) return result;
      ,*result = *first;
      return __adjacent_difference(first, last, result, value_type(first));
  }
  template<class InputIterator, class OutputIterator,class T>
  OutputIterator __adjacent_difference(InputIterator first, InputIterator last,
                                       OutputIterator result, T*)
  {
      T value = *first;
      while(++first != last) {
          T tmp = *first;
          ,*++result = tmp - value;
          value = tmp;
      }
      return ++result;
  }

  template<class InputIterator, class OutputIterator, class BinaryOperation>
  OutputIterator adjacent_difference(InputIterator first, InputIterator last,
                                     OutputIterator result, BinaryOperation binary_op)
  {
      if(first == last) return result;
      ,*result = *first;
      return __adjacent_difference(first, last, result, value_type(first),
                                   binary_op);
  }
  template<class InputIterator, class OutputIterator,class T>
  OutputIterator __adjacent_difference(InputIterator first, InputIterator last,
                                       OutputIterator result, T*, BinaryOperation binary_op)
  {
      T value = *first;
      while(++first != last) {
          T tmp = *first;
          ,*++result = binary_op(tmp,value);
          value = tmp;
      }
      return ++result;
  }
#+END_SRC
*** inner_product

init += n1 * n2
#+BEGIN_SRC C++
  template<class InputIterator1, class InputIterator2,class T>
  T inner_product(InputIterator1 first1, InputIterator last1,
                  InputIterator2 first2, T init)
  {
      for(; first1 != last1; ++first1,++first2)
          init = init + (*first1 * *first2);
      return init;
  }
  template<class InputIterator1, class InputIterator2,class T,
           class BinaryOperation1, class BinaryOperation2>
  T inner_product(InputIterator1 first1, InputIterator last1,
                  InputIterator2 first2, T init, BinaryOperation1 binary_op1,
                  BinaryOperation2 binary_op2)
  {
      for(; first1 != last1; ++first1,++first2)
          init = binary_op1(init, binary_op2(*first1, *first2));
      return init;
  }
#+END_SRC
*** partial_sum

#n = sum(#first, #n)
#+BEGIN_SRC C++
  template<class InputIterator, class OutputIterator>
  OutputIterator partial_sum(InputIterator first, InputIterator last,
                             OutputIterator result)
  {
      if(first == last) return result;
      ,*result = *first;
      return __partial_sum(first, last, result, value_type(first));
  }
  template<class InputIterator, class OutputIterator,class T>
  OutputIterator __partial_sum(InputIterator first, InputIterator last,
                               OutputIterator result, T*)
  {
      T value = *first;
      while(++first != last) {
          value = value + *first;
          ,*++result = value;
      }
      return ++result;
  }
  template<class InputIterator, class OutputIterator, class BinaryOperation>
  OutputIterator partial_sum(InputIterator first, InputIterator last,
                             OutputIterator result, BinaryOperation binary_op)
  {
      if(first == last) return result;
      ,*result = *first;
      return __partial_sum(first, last, result, value_type(first), binary_op);
  }
  template<class InputIterator, class OutputIterator,class T>
  OutputIterator __partial_sum(InputIterator first, InputIterator last,
                               OutputIterator result, T*,
                               BinaryOperation binary_op)
  {
      T value = *first;
      while(++first != last) {
          value = binary_op(value, *first);
          ,*++result = value;
      }
      return ++result;
  }
#+END_SRC
*** power *

#+BEGIN_SRC c++
  template<class T, class Interger>
  inline T power(T x, Interger n)
  {
      return power(x, n, multiplies<T>());
  }
  template<class T, class Interger, class MonoidOperation>
  T power(T x, Interger n, MonoidOperation op)
  {
      if(n == 0)
          return identity_element(op);
      else {
          //确定 x的m次 值， 为了不重复计算，看n是否能被 x的m次 整除，通过移位便可确定
          while ((n & 1) == 0) {
              n >>= 1;
              x = op(x, x);
          }
          //也是为了不重复计算，把x的n次拆分成2^m+2^(m-1)+2^(m-2)+...+1
          //先算出1次，再算出2次，再算出4次。只要对应位置上有数，加进reslt就行，
          //没有数则不加。
          T result = x;
          n >>= 1;
          while (n != 0) {
              x = op(x, x);
              if((n & 1) != 0)
                  result = op(result, x);
              n >>= 1;
          }
          return result;
      }
  }
#+END_SRC    
*** itoa *

#+BEGIN_SRC C++
  template<class ForwardIterator, class T>
  void itoa(ForwardIterator first, ForwardIterator last, T value)
  {
      while(first != last)
          ,*first++ = value++;
  }
#+END_SRC
** 基本算法
*** equal

#+BEGIN_SRC C++
  template<class InputIterator1, class InputIterator2>
  inline bool equal(InputIterator1 first1, InputIterator1 last1,
                    InputIterator2 first2)
  {
      for( ; first1 != last1; ++first1,++first2)
          if(*first1 != *first2)
              return false;
      return true;
  }
  template<class InputIterator1, class InputIterator2, class BinaryPredicate>
  inline bool equal(InputIterator1 first1, InputIterator1 last1,
                    InputIterator2 first2, BinaryPredicate binary_op)
  {
      for( ; first != last1; ++first1,++first2)
          if(!binary_op(*first1,*first2))
              return false;
      return true;
  }
#+END_SRC
*** fill

将[first, last)内的元素改填新值。
#+BEGIN_SRC C++
  template<class ForwardIterator, class T>
  void fill(ForwardIterator first, ForwardIterator last, const T& value)
  {
      for(; first != last; ++first)
          ,*first = value;
  }
#+END_SRC
*** fill_n

将[first, first + n)内的元素改填新值。
避免书写越界可利用inserter()产生一个具有插入（insert）而非覆写（overwrite）能力的迭代器
#+BEGIN_SRC C++
  template<class OutputIterator, class Size, class T>
  OutputIterator fill_n(OutputIterator first, Size n, const T& value)
  {
      for(; n >0 ; --n, ++first)
          ,*first = value;
      return first;
  }
#+END_SRC
*** iter_swap

将两个ForwardIterator所指向的对象对调。
#+BEGIN_SRC C++
  template<class ForwardIterator1, class ForwardIterator2>
  inline void iter_swap(ForwardIterator1 a, ForwardIterator2 b)
  {
      __iter_swap(a, b, value_type(a));
  }
  template<class ForwardIterator1, class ForwardIterator2, class T>
  inline void __iter_swap(ForwardIterator1 a, ForwardIterator2 b, T*)
  {
      T tmp = *a;
      *a = *b;
      *b = tmp;
  }
#+END_SRC
*** lexicographical_compare

以“字典排列方式”对两个序列[first1, last1)和[first2, last2)进行比较。
#+BEGIN_SRC C++
  template<class InputIterator1, class InputIterator2>
  bool lexicographical_compare(InputIterator1 first1, InputIterator1 last1,
                               InputIterator2 first2, InputIterator2 last2)
  {
      for(; first1 != last1 && first2 != last2; ++first1, ++first2)
      {
          if(*first1 < *first2)
              return true;
          if(*first2 < *first1)
              return false
      }
      return first1 == last1 && first2 != last2;
  }
  template<class InputIterator1, class InputIterator2, class Compare>
  bool lexicographical_compare(InputIterator1 first1, InputIterator1 last1,
                               InputIterator2 first2, InputIterator2 last2,
                               Compare comp)
  {
      for(; first1 != last1 && first2 != last2; ++first1, ++first2)
      {
          if(comp(*first1, *first2))
              return true;
          if(comp(*first2, *first1))
              return false
      }
      return first1 == last1 && first2 != last2;
  }
#+END_SRC

为了增进效率，SGI还设计了一个特化版本用于原生指针 const unsigned char *:
#+BEGIN_SRC C++
  inline bool
  lexicographical_compare(const unsigned char* first1, const unsigned char* last1,
                          const unsigned char* first2, const unsigned char* last2)
  {
      const size_t len1 = last1 - first1;
      const size_t len2 = last2 - first2;
      const int result = memcmp(first1, first2, min(len1, len2));
      return result != 0 ? result < 0 : len1 < len2;
  }
#+END_SRC
*** max

取两个对象中的较大值。
#+BEGIN_SRC C++
  template<class T>
  inline const T& max(const T& a, const T& b)
  {
      return a < b ? b : a;
  }
  template<class T, class Compare>
  inline const T& max(const T& a, const T& b, Compare comp)
  {
      return comp(a, b) ? b : a;
  }
#+END_SRC
*** min

取两个对象中的较小值。
#+BEGIN_SRC C++
  template<class T>
  inline const T& min(const T& a, const T& b)
  {
      return b < a ? b : a;
  }
  template<class T, class Compare>
  inline const T& min(const T& a, const T& b, Compare comp)
  {
      return comp(b,a) ? b : a;
  }
#+END_SRC
*** mismatch

用来平行比较两个序列，指出两者之间的第一个不匹配点。返回一对迭代器（pair），分别指向两序列中的不匹配点。
#+BEGIN_SRC C++
  template<class InputIterator1, class InputIterator2>
  pair<InputIterator1, InputIterator2> mismatch(InputIterator1 first1, InputIterator1 last1,
                                                InputIterator2 first2)
  {
      while (first != last1 && *first1 == *first2) {
          ++first1;
          ++first2;
      }
      return pair<InputIterator1, InputIterator2>(first1, first2);
  }
  template<class InputIterator1, class InputIterator2, class BinaryPredicate>
  pair<InputIterator1, InputIterator2> mismatch( InputIterator1 first1,InputIterator1 last1,
                                                 InputIterator2 first2, BinaryPredicate binary_pred)
  {
      while (first1 != last1 && binary_pred(*first1, *first2)) {
          ++first1;
          ++first2;
      }
      return pair<InputIterator1, InputIterator2>(first1, first2);
  }
#+END_SRC
*** swap

用来交换（对调）两个对象的内容。
#+BEGIN_SRC C++
  template<class T>
  inline void swap(T& a, T& b)
  {
      T tmp = a;
      a = b;
      b = tmp;
  }
#+END_SRC
*** copy --强化效率无所不用其极

泛化
#+BEGIN_SRC C++
  template<class InputIterator, class OutputIterator>
  inline OutputIterator copy(InputIterator first, InputIterator last,
                             OutputIterator result)
  {
      return __copy_dispatch<InputIterator,OutputIterator>()
          (first, last, result);
  }
  template<class InputIterator, char OutputIterator>
  struct __copy_dispatch
  {
      OutputIterator operator()(InputIterator first, InputIterator last,
                                OutputIterator result) {
          //传入一个迭代器标签，区分是否是随机迭代器
          return __copy(first, last, result, iterator_category(first));
      }
  };
  // 指针特化
  template<class T>
  struct __copy_dispatch<T*, T*>
  {
      T* operator()(T* first, T* last, T* result) {
          //判断 是否 没有 assignment_operator重载操作
          typedef typename __type_traits<T>::has_trivial_assignment_operator t;
          return __copy_t(first, last, result, t());
      }
  };
  // const指针特化 
  template<class T>
  struct __copy_dispatch<const T*, T*>
  {
      T* operator()(const T* first, const T* last, T* result) {
          typedef typename __type_traits<T>:: has_trivial_assignment_operator t;
          return __copy_t(first, last, result, t());
      }
  };
  //input是基类，不管forward 还是bidi迭代器都走这边
  template<class InputIterator, class OutputIterator>
  inline OutputIterator __copy(InputIterator first, InputIterator last,
                               OutputIterator result, input_iterator_tag)
  {
      for(; first != last; ++result, ++first)
          ,*result = *first;
      return result;
  }
  //随机迭代器走这边
  template<class RandomAccessIterator, class OutputIterator>
  inline OutputIterator __copy(RandomAccessIterator first, RandomAccessIterator last,
                               OutputIterator result, random_access_iterator_tag)
  {
      return __copy_d(first, last, result, distance_type(first));
  }
  //直接算出区间大小，根据大小来循环 不需要判断迭代是否相等，可以有效提升速度
  template<class RandomAccessIterator, class OutputIterator, class Distance>
  inline OutputIterator
  __copy_d(RandomAccessIterator first, RandomAccessIterator last,
           OutputIterator result, Distance*)
  {
      for(Distance n = last - first; n > 0; --n, ++result, ++first )
          ,*result = *first;
      return result;
  }
  //是 没有assignment_operator重载操作的话 就走这。直接复制内存
  template<class T>
  inline T* __copy_t(const T* first, const T* last, T* result, __true_type)
  {
      memmove(result, first, sizeof(T) * (last - first));
      return result + (last - first);
  }
  //不是 没有assignment_operator重载操作(也就是有重载) 走这边，调用随机迭代器的copy方法
  template<class T>
  inline T* __copy_t(const T* first, const T* last, T* result,
                     __false_type)
  {
      return __copy_d(first, last, result, (ptrdiff_t*) 0);
  }
#+END_SRC

特化
#+BEGIN_SRC C++
  inline char* copy(const char* first, const char* last, char* result)
  {
      memmove(result, first, last - first);
      return result + (last - first);
  }
  inline wchar_t* copy(const wchar_t* first, const wchar_t* last,
                       const wchar_t* result)
  {
      memmove(result, first, sizeof(wchar_t) * (last - first));
      return result + (last - first);
  }
#+END_SRC
*** copy_backward -- 参照 copy

将[first,last)区间内的每一个元素，以逆行的方向复制到以result-1为起点，方向亦为逆行的区间上。

#+BEGIN_SRC C++
  template<class BidirectionalIterator1, class BidirectionalIterator2>
  inline BidirectionalIterator2 copy( BidirectionalIterator1 first,
                                      BidirectionalIterator1 last,
                                      BidirectionalIterator2 result);
#+END_SRC
copy_backward 所接受的迭代器必须是BidirectionalTterators, 才能够“倒行逆施”。

** set 相关算法
STL一共提供了四种与set（集合）相关的算法，分别是并集（union）、交集（intersection）、差集（difference）、对称差集（symmetric difference）。

*** set_union

*** set_intersection

*** set_difference

*** set_symmetric_difference

** heap 相关算法

*** make_heap

*** pop_heap

*** push_heap

*** sort_heap

** 其他算法
*** adjacent_find

找到第一组满足条件的相邻元素。
#+BEGIN_SRC C++
  template<class ForwardIterator>
  ForwardIterator adjacent_find(ForwardIterator first, ForwardIterator last)
  {
      if (first == last)
          return last;
      ForwardIterator next = first;
      while (++next != last) {
          if(*first == *next) return first;
          first = next;
      }
      return last;
  }
  template<class ForwardIterator>
  ForwardIterator adjacent_find(ForwardIterator first, ForwardIterator last
                                BinaryPredicate binary_op)
  {
      if (first == last)
          return last;
      ForwardIterator next = first;
      while (++next != last) {
          if(binary_op(*first, *next)) return first;
          first = next;
      }
      return last;
  }
#+END_SRC
*** count

运用equality操作符，将[first, last)区间内的每一个元素拿来和指定值value比较，并返回与value相等的元素个数。
#+BEGIN_SRC C++
  template<class InputIterator, class T>
  typename iterator_traits<InputIterator>::difference_type
  count(InputIterator first, InputIterator last, const T& value)
  {
      typename iterator_traits<InputIterator>::difference_type n = 0;
      for(; first != last; ++first)
          if(*first == value) ++n;
      return n;
  }
#+END_SRC
*** count_if

将制定操作（一个仿函数）pred实施于[first, last)区间内的每一个元素身上，并将“造成pred之计算结果为true”的所有元素的个数返回。
#+BEGIN_SRC C++
  template<class InputIterator, class Predicate>
  typename iterator_traits<InputIterator>::difference_type
  count_if(InputIterator first, InputIterator last, Predicate pred)
  {
      typename iterator_traits<InputIterator>::difference_type n = 0;
      for(; first != last; ++first)
          if(pred(*first)) ++n;
      return n;
  }
#+END_SRC
*** find 参照 count

#+BEGIN_SRC C++
  template<class InputIterator, class T>
  InputIterator find(InputIterator first, InputIterator last, const T& value);
#+END_SRC
*** find_if 参照 count_if

#+BEGIN_SRC C++
  template<class InputIterator, class Predicate>
  typename iterator_traits<InputIterator>::difference_type
  find_if(InputIterator first, InputIterator last, Predicate pred);
#+END_SRC
*** find_end

在序列一[first1, last1)所涵盖的区间中，查找序列二[first2, last2)的最后一次出现点。

#+BEGIN_SRC C++
  template<class ForwardIterator1, class ForwardIterator2>
  inline ForwardIterator1
  find_end(ForwardIterator1 first1, ForwardIterator1 last1,
           ForwardIterator2 first2, ForwardIterator2 last2)
  {
      typedef typename iterator_traits<ForwardIterator1>::iterator_category category1;
      typedef typename iterator_traits<ForwardIterator2>::iterator_category category2;
      return __find_end(first1, last1, first2, last2, category1(), category2());
  }
  template<class ForwardIterator1, class ForwardIterator2>
  ForwardIterator1 __find_end(ForwardIterator1 first1, ForwardIterator1 last1,
                              ForwardIterator2 first2, ForwardIterator2 last2,
                              forward_iterator_tag, forward_iterator_tag)
  {
      if(first2 == last2) return last1;
      else {
          ForwardIterator1 result = last1;
          while (1) {
              //先搜索下一组，再把下一组赋给result  就和单链表删除节点一样，要删除下一个节点，
              //我们要预留上一个节点，这里是要先找到 下一个不符合的情况 我们才知道这是最后一个
              ForwardIterator1 new_result = search(first1, last1, first2, last2);
              if(new_result == last1) return result;
              else {
                  result = new_result;
                  first1 = new_result;
                  ++first;
              }
          }
      }
  }
  //双向迭代器走这边
  template<class BidirectionalIterator1, class BidirectionalIterator2>
  BidirectionalIterator1
  __find_end(BidirectionalIterator1 first1, BidirectionalIterator1 last1,
             BidirectionalIterator2 first2, BidirectionalIterator2 last2,
             bidirectional_iterator_tag, bidirectional_iterator_tag)
  {
      typedef reverse_iterator<BidirectionalIterator1> reviter1;
      typedef reverse_iterator<BidirectionalIterator2> reviter2;
      //先确定end位置
      reviter1 rlast1(first1);
      reviter2 rlast2(first2);
      //找到第一组就可以了
      reviter1 rresult = search(reviter1(last1), rlast1, reviter2(last2), rlast2);
      if(rresult == rlast1) return last1;       //没找到
      else {
          //修改位置， base()成员函数可以取得真实位置，因为反向迭代器有两个位置，
          //一个是真实位置，一个是他 “下一个”位置 他的”下一个“其实是正向迭代器的上一个
          //1 2 3 此时反向迭代器指向3 operator*() 取到的是2 base()取到的是 3
          //下面的操作是为了使result == end
          BidirectionalIterator1 result = rresult.base();
          //减去距离，就可以使result变成first
          advance(result, -distance(first2, last2));
          return result;
      }
  }
#+END_SRC
*** find_first_of 参照 find_end

在序列一[first1, last1)所涵盖的区间中，查找序列二[first2, last2)的第一次出现点。
#+BEGIN_SRC C++
  template<class InputIterator, class ForwardIterator>
  InputIterator find_first_of(InputIterator first1, InputIterator last1,
                              ForwardIterator first2, ForwardIterator last2)
  {
      for(; first1 != last1; ++first1)
          for(ForwardIterator iter = first2; iter != last2; ++iter)
              if(*first1 == *iter) return first;
      return last1;
  }
  template<class InputIterator, class ForwardIterator, class BinaryPredicate>
  InputIterator find_first_of(InputIterator first1, InputIterator last1,
                              ForwardIterator first2, ForwardIterator last2
                              BinaryPredicate comp)
  {
      for(; first1 != last1; ++first1)
          for(ForwardIterator iter = first2; iter != last2; ++iter)
              if(comp(*first1 == *iter)) return first;
      return last1;
  }
#+END_SRC
*** for_each

将仿函数f施行于[first1, last1)区间内的每一个元素身上。
#+BEGIN_SRC C++
  template<class InputIterator, class Function>
  Function for_each(InputIterator first, InputIterator last, Function f)
  {
      for(; first != last; ++first) f(*first);
      return f;
  }
#+END_SRC
*** generate

将仿函数gen的运算结果填写在[first, last)区间内的所有元素身上。
#+BEGIN_SRC C++
  template<class ForwardIterator, class Generator>
  void generate(ForwardIterator first, ForwardIterator last, Generator gen)
  {
      for(; first != last; ++first)
          ,*first = gen();
  }
#+END_SRC
*** generate_n
    
将仿函数gen的运算结果填写在[first, first + n)区间内的所有元素身上。

#+BEGIN_SRC C++
  template<class OutputIterator,class Size, class Generator>
  OutputIterator generate_n(OutputIterator first, Size n, Generator gen)
  {
      for(; n > 0; --n, ++first) *first = gen();
      return first;
  }
#+END_SRC
*** includes (应用于有序区间)

判断序列二是否“涵盖于”序列一。
#+BEGIN_SRC C++
  template<class InputIterator1, class InputIterator2>
  bool includes(InputIterator1 first1, InputIterator1 last1,
                InputIterator2 first2, InputIterator2 last2)
  {
      while (first1 != last1 && first2 != last2) {
          if(*first2 < *first1) return false;
          else if(*first1 < *first2) ++first1;
          else ++first1, ++first2;
      }
      return first2 == last2;
  }

  template<class InputIterator1, class InputIterator2, class Compare>
  bool includes(InputIterator1 first1, InputIterator1 last1,
                InputIterator2 first2, InputIterator2 last2, Compare comp)
  {
      while (first1 != last1 && first2 != last2) {
          if(compare(*first2, *first1)) return false;
          else if(compare(*first1, *first2)) ++first1;
          else ++first1, ++first2;
      }
      return first2 == last2;
  }
#+END_SRC
*** max_element

返回一个迭代器，指向序列之中数值最大的元素。
#+BEGIN_SRC C++
  template<class ForwardIterator>
  ForwardIterator max_element(ForwardIterator first, ForwardIterator last)
  {
      if(first == last) return first;
      ForwardIterator result = first;
      while(++first != last)
          if(*result < *first) result = first;
      return result;
  }
  template<class ForwardIterator, class Compare>
  ForwardIterator max_element(ForwardIterator first, ForwardIterator last,
                              Compare comp)
  {
      if(first == last) return first;
      ForwardIterator result = first;
      while(++first != last)
          if(comp(*result, *first)) result = first;
      return result;
  }
#+END_SRC
*** min_element -- 参照 max_element

返回一个迭代器，指向序列之中数值最小的元素。

*** merge (应用于有序空间)

将两个序列合并为一个序列
#+BEGIN_SRC C++
  template<class InputIterator1, class InputIterator2, class OutputIterator>
  OutputIterator merge(InputIterator1 first1, InputIterator1 last1,
                       InputIterator2 first2, InputIterator2 last2,
                       OutputIterator result)
  {
      while (first1 != last1 && first2 != last2) {
          if(*first2 < *first1) {
              ,*result = *first2;
              ++first2;
          }
          else {
              ,*result = *first1;
              ++first1;
          }
          ++result;
      }
      return copy(first2, last2, copy(first1, last1, result));
  }
  template<class InputIterator1, class InputIterator2, class OutputIterator, class Compare>
  OutputIterator merge(InputIterator1 first1, InputIterator1 last1,
                       InputIterator2 first2, InputIterator2 last2,
                       OutputIterator result, Compare comp)
  {
      while (first1 != last1 && first2 != last2) {
          if(comp(*first2, *first1)) {
              ,*result = *first2;
              ++first2;
          }
          else {
              ,*result = *first1;
              ++first1;
          }
          ++result;
      }
      return copy(first2, last2, copy(first1, last1, result));
  }
#+END_SRC
*** partition

将区间[first, last)中的元素重新排列，所有被一元条件运算pred判定为true的元素，都会被放在区间的前端，被判定为false的元素，都会被放在区间的后端。这个算法并不保证保留元素的原始相对位置。如果需要保留原始相对位置，应使用stable_partition。
#+BEGIN_SRC C++
  template<class BidirectionalIterator, class Predicate>
  BidirectionalIterator partition(BidirectionalIterator first,
                                  BidirectionalIterator last,
                                  Predicate pred)
  {
      while (true) {
          while (true) {
              if(first == last) return first;
              else if(pred(*first)) ++first;
              else break;
          } --last;             //第一次指向的事end所以-- 之后指向的是判断过的数，所以要--
          while (true) {
              if(first == last) return first;
              else if(!pred(*last)) --last;
              else break;
          }
          iter_swap(first, last);
          ++first;            //接下来要判断下一个
      }
  }
#+END_SRC
*** remove 移除（但不删除）

移除[first, last)区间内所有与value相等的元素。
注意：这一算法并不是真正从容器中删除那些元素（换句话说容器的大小并没有发生改变）。
#+BEGIN_SRC C++
  template<class ForwardIterator, class T>
  ForwardIterator remove(ForwardIterator first, ForwardIterator last,
                         const T& value)
  {
      first = find(first, last, value);
      ForwardIterator next = first;
      return first == last ? first : remove_copy(++next, last, first, value);
  }
#+END_SRC
*** remove_copy

移除[first, last)区间内所有与value相等的元素。（原容器不发生改变）将结果复制到一个以result表示起始位置的容器身上。
#+BEGIN_SRC C++
  template<class InputIterator, class OutputIterator, class T>
  OutputIterator remove_copy(InputIterator, first, InputIterator last,
                             OutputIterator result, const T& value)
  {
      for(; first != last; ++first)
          if(*first != value) {
              ,*result = *first;
              ++result;
          }
      return result;
  }
#+END_SRC
*** remove_if -- 参照 remove

*** remove_copy_if -- 参照 remove_copy

*** replace

将[first, last)区间内的所有old_value都以new_value取代。
#+BEGIN_SRC C++
  template<class ForwardIterator, class T>
  void replace(ForwardIterator first, ForwardIterator last,
               const T& old_value, const T& new_value)
  {
      for(; first != last; ++first)
          if(*first == old_value)
              ,*first = new_value;
  }
#+END_SRC
*** replace_copy

将[first, last)区间内的所有old_value都以new_value取代。（原容器不发生改变）将结果复制到一个以result表示起始位置的容器身上。
#+BEGIN_SRC C++
  template<class InputIterator, class OutputIterator, class T>
  OutputIterator replace_copy(InputIterator first, InputIterator last,
                              OutputIterator result, const T& old_value,
                              const T& new_value)
  {
      for(; first != last; ++first, ++result)
          ,*result = *first == old_value ? new_value : *first;
      return result;
  }
#+END_SRC
*** replace_if -- 参照 replace

*** replace_copy_if -- 参照 replace_copy
    
*** reverse

将序列[first, last)区间的元素在原容器中颠倒重排。
#+BEGIN_SRC C++
  template<class BidirectionalIterator>
  inline void reverse(BidirectionalIterator first, BidirectionalIterator last)
  {
      __reverse(first, last, iterator_category(first));
  }
  template<class BidirectionalIterator>
  void __reverse(BidirectionalIterator first, BidirectionalIterator last,
                 bidirectional_iterator_tag)
  {
      while (true) {
          if(first == last || first == --last) return;
          else iter_swap(first++, last);
      }
  }
  //随机迭代器的版本只需要判断一次 而非随机迭代器要判断两次，故效率上有差距，所以分开写
  template<class RandomAccessIterator>
  void __reverse(RandomAccessIterator first, RandomAccessIterator last,
                 random_access_iterator_tag)
  {
      while(first < last)
          iter_swap(first++, --last);
  }
#+END_SRC

*** reverse_copy

#+BEGIN_SRC C++
  template<class BidirectionalIterator, class OutputIterator>
  OutputIterator reverse_copy(BidirectionalIterator first,
                              BidirectionalIterator last,
                              OutputIterator result)
  {
      while (first != last) {
          --last;
          ,*result = *last;
          ++result;
      }
      return result;
  }
#+END_SRC

*** rotate

将[first, middle)内的元素和[middle, last)内的元素互换。
#+BEGIN_SRC C++
  template<class ForwardIterator>
  inline void rotate(ForwardIterator first, ForwardIterator middle,
                     ForwardIterator last)
  {
      if(first == middle || middle == last) return;
      __rotate(first, middle, last, distance_type(first),
               iterator_category(first));
  }
  //单向的迭代器走这边
  //只能单向行走，效率最低，要赋值起码1.5n次(当两者区间相同时)。
  //调用一次swap就要赋值3次
  template<class ForwardIterator, class Distance>
  void __rotate(ForwardIterator first, ForwardIterator middle,
                ForwardIterator last, Distance*, forward_iterator_tag)
  {
      for(ForwardIterator i = middle; ;) {
          iter_swap(first, i);
          ++first;
          ++i;
          if(first == middle) {
              if(i == last) return;
              middle = i;
          }
          else if(i ==last) i = middle;
      }
  }
  //三次反转 固定赋值1.5n次
  template<class BidirectionalIterator, class Distance>
  void __rotate(BidirectionalIterator first, BidirectionalIterator middle,
                BidirectionalIterator last, Distance*,
                bidirectional_iterator_tag)
  {
      reverse(first, middle);
      reverse(middle, last);
      reverse(first, last);
  }
  template<class RandomAccessIterator, class Distance>
  void __rotate(RandomAccessIterator first, RandomAccessIterator middle,
                RandomAccessIterator last, Distance*,
                random_access_iterator_tag)
  {
      Distance n = __gcd(last - first, middle - first);
      while (n--)
          __rotate_cycle(first, last, first + n, middle - first,
                         value_type(first));
  }
  template<class EuclideanRingElement>
  EuclideanRingElement __gcd(EuclideanRingElement m, EuclideanRingElement n)
  {
      while (n != 0) {
          EuclideanRingElement t = m % n;
          m = n;
          n = t;
      }
      return m;
  }
  //最差的情况赋值1.5n次(当区间相等时)，最少赋值n＋1次(第一个或第二个区间为1时)。
  template<class RandomAccessIteratorm, class Distance, class T>
  void __rotate_cycle(RandomAccessIterator first, RandomAccessIterator last,
                      RandomAccessIterator initial, Distance shift, T*)
  {
      T value = *initial;
      RandomAccessIterator ptr1 = initial;
      RandomAccessIterator ptr2 = ptr1 + shift;
      while (ptr2 != initial) {
          ,*ptr1 = *ptr2;
          ptr1 = ptr2;
          if(last - ptr2 > shift)
              ptr2 += shift;
          else
              ptr2 = first + (shift - (last - ptr2));
      }
      ,*ptr1 = value;
  }
#+END_SRC
    
*** rotate_copy

#+BEGIN_SRC C++
  template<class ForwardIterator, class OutputIterator>
  OutputIterator rotate_copy(ForwardIterator first, ForwardIterator middle,
                             ForwardIterator last, OutputIterator result)
  {
      return copy(first, middle, copy(middle, last, result));
  }
#+END_SRC
*** search

#+BEGIN_SRC C++
  template<class ForwardIterator1, class ForwardIterator2>
  inline ForwardIterator search(ForwardIterator1 first1,
                                ForwardIterator1 last1,
                                ForwardIterator2 first2,
                                ForwardIterator last2)
  {
      return __search(first1, last1, first2, last2,distance_type(first1),
                      distance_type(first2));
  }

  template<class ForwardIterator1, class ForwardIterator2, class distance1,
           class Distance2>
  ForwardIterator1 __search(ForwardIterator1 first1, ForwardIterator1 last1,
                            ForwardIterator2 first2, ForwardIterator2 last2,
                            Distance1*, Distance2*)
  {
      Distance1 d1 = 0;
      distance(first1, last1, d1);
      Distance2 d2 = 0;
      distance(first2, last2, d2);
      if(d1 < d2) return last1;
      ForwardIterator1 current1 = first1;
      ForwardIterator2 current2 = first2;
      while (current2 != last2) {
          if (*current1 == *current2) {
              ++current1;
              ++current2;
          }
          else {
              if (d1 == d2)
                  return last1;
              else {
                  current1 = ++first1;
                  current2 = first2;
                  --d1;
              }
          }
      }
      return first1;
  }
#+END_SRC
*** search_n

#+BEGIN_SRC C++
  template<class ForwardIterator, class Interger, class T>
  ForwardIterator search_n(ForwardIterator first,
                           ForwardIterator last,
                           Interger count, const T& value)
  {
      if(count <= 0) return first;
      else {
          //先找到第一个
          first = find(first, last, value);
          while (first != last) {
              Interger n = count - 1;
              ForwardIterator i = first;
              ++i;
              //找连续符合的元素，都找到了的话 n会等于0；
              while (i != last && n != 0 && *i == value) {
                  ++i;
                  --n;
              }
              if(n == 0) return first;
              else
                  first = find(i, last, value);
          }
          return last;
      }
  }
  template<class ForwardIterator, class Interger, class T,
           class BinaryPredicate>
  ForwardIterator search_n(ForwardIterator first,
                           ForwardIterator last,
                           Interger count, const T& value,
                           BinaryPredicate binary_pred)
  {
      if(count <= 0) return first;
      else {
          //自己实现find，其实可以使用find_if版本的 不过需要使用bind函数
          while (first != last) {
              if(binary_pred(*first, value)) break;
              ++first;
          }
          while (first != last)
          {
              Interger n = count - 1;
              ForwardIterator i = first;
              ++i;
              //找连续符合的元素，都找到了的话 n会等于0；
              while (i != last && n != 0 && *i == value) {
                  ++i;
                  --n;
              }
              if(n == 0) return first;
              else {
                  while (i != last) {
                      if(binary_pred(*first, value)) break;
                      ++i;
                  }
                  first = i;
              }
          }
          return last;
      }
  }
#+END_SRC
*** swap_ranges

注意：区间不能重叠，不然会产生未知结果
#+BEGIN_SRC C++
  template<class ForwardIterator1, class ForwardIterator2>
  ForwardIterator2 swap_ranges(ForwardIterator1 first1,
                               ForwardIterator1 last1,
                               ForwardIterator2 first2)
  {
      for(; first != last1; ++first1, ++first2)
          iter_swap(first1, first2);
      return first2;
  }
#+END_SRC
*** transform

#+BEGIN_SRC C++
  template<class InputIterator, class OutputIterator, class UnaryOperation>
  OutputIterator transform(InputIterator first1, InputIterator last,
                           OutputIterator result, UnaryOperation op)
  {
      for(; first != last; ++first, ++result)
          ,*result = op(*first);
      return result;
  }
  template<class InputIterator1, class InputIterator2, class OutputIterator,
           class BinaryOperation>
  OutputIterator transform(InputIterator1 first1, InputIterator last1,
                           InputIterator2 first2, InputIterator last2,
                           BinaryOperation binary_op)
  {
      for(; first1 != last1; ++first1, ++first2, ++result)
          ,*result = binary_op(*first1, *first2);
      return result;
  }
#+END_SRC
*** unique

移除（remove）重复的元素。

#+BEGIN_SRC C++
  template<class ForwardIterator>
  ForwardIterator unique(ForwardIterator first, ForwardIterator last)
  {
      first = adjacent_find(first, last);
      return unique_copy(first, last, first);
  }
#+END_SRC
*** unique_copy


#+BEGIN_SRC C++
  template<class InputIterator, class ForwardIterator>
  inline OutputIterator unique_copy(InputIterator first,
                                    InputIterator last,
                                    OutputIterator result)
  {
      if(first == last) return result;
      return __unique_copy(first, last, result, iterator_category(result));
  }
  template<class InputIterator, class ForwardIterator>
  ForwardIterator __unique_copy(InputIterator first,
                                InputIterator last,
                                ForwardIterator result,
                                forward_iterator_tag)
  {
      ,*result = *first;
      while (++first != last) {
          if(*result != *first)
              ,*++result = *first;
      }
      return ++result;
  }
  template<class InputIterator, class OutputIterator>
  inline OutputIterator __unique_copy(InputIterator first,
                                      InputIterator last,
                                      ForwardIterator result,
                                      output_iterator_tag)
  {
      return __unique_copy(first, last, result, value_type(first));
  }
  template<class InputIterator, class OutputIterator, class T>
  OutputIterator __unique_copy(InputIterator first, InputIterator last,
                               OutputIterator result, T*)
  {
      T value = *first;
      ,*result = value;
      while (++first != last) {
          if(value != *first) { //如果result为只读，这里就只能通过值判断 而不能使用(*result != *first)
              value = *first;
              ,*++result = value;
          }
      }
      return ++result;
  }
#+END_SRC


