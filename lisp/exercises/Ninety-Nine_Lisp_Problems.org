* Ninety-Nine Lisp Problems
** Working with lists
列表操作
*** P01. (*) Find the last box of a list.
只含最后一个元素的列表。

#+BEGIN_SRC emacs-lisp
  (defun fit-last (lst)
    (if (null (cdr lst))
        lst
      (fit-last (cdr lst))))
#+END_SRC

*** P02. (*) Find the last but one box of a list.
除最后一个元素外的列表。

#+BEGIN_SRC emacs-lisp
  (defun fit-but-last (lst)
    (if (atom (cddr lst))
        lst
      (fit-but-last (cdr lst))))
#+END_SRC

*** P03. (*) Find the N'th element of a list.
查找列表中的第 N 个元素。

The first element in the list is number 1.

#+BEGIN_SRC emacs-lisp
  (defun fit-element-at (lst n)
    (if (= n 1)
        (car lst)
      (fit-element-at (cdr lst) (- n 1))))
#+END_SRC

*** P04. (*) Find the number of elements of a list.
查看列表中有多少个元素。

#+BEGIN_SRC emacs-lisp
  (defun fit-length (lst)
    (if (null lst)
        0
      (+ (fit-length (cdr lst)) 1)))
  (defun fit-length-all (lst)
    (cond  ((null lst) 0)
           ((atom (car lst)) (+ (fit-length-all (cdr lst)) 1))
           (t (+ (fit-length-all (car lst)) (fit-length-all (cdr lst))))))

  (fit-length '(1 2 (3 4 (5 6) (7 8)) 9 (10 11)))
  > 5
  (fit-length-all '(1 2 (3 4 (5 6) (7 8)) 9 (10 11)))
  > 11
#+END_SRC

*** P05. (*) Reverse a list.
逆置一个列表。

#+BEGIN_SRC emacs-lisp
  (defun fit-reverse (lst)
    (if (null lst)
        nil
      (append (fit-reverse (cdr lst)) (list (car lst)))))
  (defun fit-reverse-all (lst)
    (cond ((null lst) nil)
          ((atom (car lst))
           (append (fit-reverse-all (cdr lst)) (list (car lst))))
          (t (append (cdr lst) (list (fit-reverse-all(car lst)))))))

  (fit-reverse '(1 2 (3 4 (5 6 7)) (8 9)))
  > ((8 9) (3 4 (5 6 7)) 1 2)
  (fit-reverse-all '(1 2 (3 4 (5 6 7)) (8 9)))
  > ((8 9) ((7 6 5) 4 3) 2 1)
#+END_SRC

*** P06. (*) Find out whether a list is a palindrome.
断言一个回文列表。

A palindrome can be read forward or backward; e.g. (x a m a x).

#+BEGIN_SRC emacs-lisp
  (defun fit-palindromep (lst)
    (equal lst (reverse lst)))

  (fit-palindromep '(1 2 3 2 1))
  > t
#+END_SRC

*** P07. (**) Flatten a nested list structure.
扁平化一个嵌套列表结构。

Transform a list, possibly holding lists as elements into a `flat' list by replacing each list with its elements (recursively).

#+BEGIN_SRC emacs-lisp
  (defun fit-flatten (lst)
    (cond ((null lst) nil)
          ((atom lst) (list lst))
          (t (append (fit-flatten (car lst)) (fit-flatten (cdr lst))))))

  (fit-flatten '(1 2 (3 (4 5 (6))) (7 8 (9 10) (11 12))))
  > (1 2 3 4 5 6 7 8 9 10 11 12)
#+END_SRC

*** P08. (**) Eliminate consecutive duplicates of list elements.
消除列表中连续的重复元素。

If a list contains repeated elements they should be replaced with a single copy of the element. The order of the elements should not be changed.

#+BEGIN_SRC emacs-lisp
  (defun fit-compress (lst)
    (labels ((rec (lst acc prev)
                 (cond ((null lst) acc)
                       ((equal (car lst) prev) (rec (cdr lst) acc prev))
                       (t (rec (cdr lst) (append acc (list (car lst))) (car lst))))))
      (rec lst nil nil)))

  (fit-compress '(1 1 1 2 2 3 4 4 5))
  > (1 2 3 4 5)
#+END_SRC
*** P09. (**) Pack consecutive duplicates of list elements into sub lists.
If a list contains repeated elements they should be placed in separate sublists.

#+BEGIN_SRC emacs-lisp
  (defun fit-collect (lst)
    (if (null lst)
        lst
      (labels ((rec (lst temp acc)
                    (cond ((null lst) (cons temp acc))
                          ((null temp) (rec (cdr lst) (list (car lst)) acc))
                          ((equal (car temp) (car lst)) (rec (cdr lst) (cons (car lst) temp) acc))
                          (t (rec (cdr lst) (list (car lst)) (cons temp acc))))))
        (reverse (rec lst nil nil)))))

  (fit-collect '(1 1 1 2 2 3 (4 4) (4 4)))
  > ((1 1 1) (2 2) (3) ((4 4) (4 4)))
#+END_SRC

*** P10. (*) Run-length encoding of a list.
Use the result of problem P09 to implement the so-called run-length encoding data compression method. Consecutive duplicates of elements are encoded as lists (N E) where N is the number of duplicates of the element E.

#+BEGIN_SRC emacs-lisp
  (defun fit-general-process (combine fn lst)
    (labels ((rec (lst acc)
                  (if (null lst)
                      acc
                    (rec (cdr lst) (funcall combine  acc (list (funcall fn (car lst))))))))
      (rec (fit-collect lst) nil)))

  (fit-general-process #'append #'identity '(1 1 2 2 3 4 4 4 4 5 6))
  > ((1 1) (2 2) (3) (4 4 4 4) (5) (6))

  (defun fit-encode (lst)
    (fit-general-process #'append
                         #'(lambda (sub)
                             (list (length sub) (car sub)))
                         lst))

  (fit-encode '(1 1 1 2 2 3 3 3 3))
  > ((3 1) (2 2) (4 3))
#+END_SRC

*** P11. (*) Modified run-length encoding.
Modify the result of problem P10 in such a way that if an element has no duplicates it is simply copied into the result list. Only elements with duplicates are transferred as (N E) lists.

#+BEGIN_SRC emacs-lisp
  (defun fit-encode-modified (lst)
    (fit-general-process #'append
                         #'(lambda (sub)
                             (if (= 1 (length sub))
                                 (car sub)
                               (list (length sub) (car sub))))
                         lst))
  (fit-encode-modified '(a a a b c c c c d e e))
  > ((3 a) b (4 c) d (2 e))
#+END_SRC

*** P12. (**) Decode a run-length encoded list.
Given a run-length code list generated as specified in problem P11. Construct its uncompressed version.

#+BEGIN_SRC emacs-lisp
  (defun fit-decode (lst)
    (labels ((rec (lst)
                  (cond ((null lst) nil)
                        ((atom lst) (list lst))
                        (t (append (rec (car lst)) (rec (cdr lst)))))))
      (rec (fit-general-process #'append
                                #'(lambda (elem)
                                    (let ((e (car elem)))
                                      (if (atom e)
                                          (list e)
                                        (loop for i from 1 to (car e)
                                              collect (cadr e)))))
                                lst))))

  (fit-decode '((3 a) (4 b) (5 c) (1 d) e))
  > (a a a b b b b c c c c c d e)
#+END_SRC

*** P13 (**) Run-length encoding of a list (direct solution).
Implement the so-called run-length encoding data compression method directly. I.e. don't explicitly create the sublists containing the duplicates, as in problem P09, but only count them. As in problem P11, simplify the result list by replacing the singleton lists (1 X) by X.

参考 P11。

*** P14 (*) Duplicate the elements of a list.

#+BEGIN_SRC emacs-lisp
  (defun fit-dupli (lst)
    (if (null lst)
        nil
      (append (list (car lst) (car lst)) (fit-dupli (cdr lst)))))

  (fit-dupli '(a b c (d d)))
  > (a a b b c c (d d) (d d))
#+END_SRC

*** P15 (**) Replicate the elements of a list a given number of times.

#+BEGIN_SRC emacs-lisp
  (defun fit-repli (lst n)
    (mapcan #'(lambda (x)
                (loop for i from 1 to n
                      collect x))
            lst))

  (fit-repli '(a b c) 3)
  > (a a a b b b c c c)
#+END_SRC


*** P16 (**) Drop every N'th element from a list.
扔掉列表中的第 N 个元素。

#+BEGIN_SRC emacs-lisp
  (defun fit-drop (lst n)
    (labels ((rec (lst i)
                  (cond ((null lst) nil)
                        ((= i n) (rec (cdr lst) 1))
                        (t (cons (car lst) (rec (cdr lst) (+ i 1)))))))
      (rec lst 1)))

  (fit-drop '(1 2 3 4 5 6 7) 3)
  > (1 2 4 5 7)
#+END_SRC

*** P17 (*) Split a list into two parts; the length of the first part is given.
Do not use any predefined predicates.

#+BEGIN_SRC emacs-lisp
  (defun fit-subseq (lst start end)
    (labels ((copy (lst len acc)
                   (if (= len 0)
                       acc
                     (copy (cdr lst) (- len 1) (append acc (list (car lst)))))))
      (copy (nthcdr start lst) (- end start) nil)))
  (defun fit-split (lst n)
    (list (fit-subseq lst 0 n) (fit-subseq lst n (length lst))))

  (fit-split '(1 2 3 4 5 6) 2)
  > ((1 2) (3 4 5 6))
#+END_SRC

*** P18 (**) Extract a slice from a list.
切割出一个子串。

Given two indices, I and K, the slice is the list containing the elements between the I'th and K'th element of the original list (both limits included). Start counting the elements with 1.

#+BEGIN_SRC emacs-lisp
  (defun fit-slice (lst start end)
    (fit-subseq lst (- start 1) end))

  (fit-slice '(1 2 3 4 5 6 7 8) 2 6)
  > (2 3 4 5 6)
#+END_SRC

*** P19 (**) Rotate a list N places to the left.
Hint: Use the predefined functions length and append, as well as the result of problem P17.

#+BEGIN_SRC emacs-lisp
  (defun fit-rotate (lst n)
    (let ((len (length lst)))
      (if (> n 0)
          (append (subseq lst n len) (subseq lst 0 n))
        (append (subseq lst (+ len n) len) (subseq lst 0 (+ len n))))))

  (fit-rotate '(1 2 3 4 5 6) 4)
  > (5 6 1 2 3 4)
#+END_SRC

*** P20 (*) Remove the K'th element from a list.

#+BEGIN_SRC emacs-lisp
  (defun fit-remove-at (lst n)
    (if (= n 1)
        (cdr lst)
      (cons (car lst) (fit-remove-at (cdr lst) (- n 1)))))

  (fit-remove-at '(a b c d e) 4)
  > (a b c e)
#+END_SRC

*** P21 (*) Insert an element at a given position into a list.

#+BEGIN_SRC emacs-lisp
  (defun fit-insert-at (elem lst pos)
    (if (= pos 1)
        (cons elem lst)
      (cons (car lst) (fit-insert-at elem (cdr lst) (- pos 1)))))

  (fit-insert-at 'fit '(a b c d) 3)
  > (a b fit c d)
#+END_SRC

*** P22 (*) Create a list containing all integers within a given range.
If first argument is smaller than second, produce a list in decreasing order.

#+BEGIN_SRC emacs-lisp
  (defun fit-range (n m)
    (if (> m n)
        (loop for i from n to m collect i)
      (reverse (loop for i from m to n collect i))))

  (fit-range 10 5)
  > (10 9 8 7 6 5)
#+END_SRC

*** P23 (**) Extract a given number of randomly selected elements from a list.
The selected items shall be returned in a list.
Hint: Use the built-in random number generator and the result of problem P20.

#+BEGIN_SRC emacs-lisp
  (defun fit-rnd-select (lst n)
    (if (= n 0)
        nil
      (let ((r (random (length lst))))
        (cons (nth r lst)
              (fit-rnd-select (fit-remove-at lst (+ r 1)) (- n 1))))))

  (fit-rnd-select '(1 2 3 4 5 6 7 8) 4)
  > (2 1 5 6)
#+END_SRC

*** P24 (*) Lotto: Draw N different random numbers from the set 1..M.
从整数 1 - M 中随机抽出 N 个数组成列表（大乐透抽奖）。

The selected numbers shall be returned in a list.

Hint: Combine the solutions of problems P22 and P23.

#+BEGIN_SRC emacs-lisp
  (defun fit-lotto-select (n m)
    (fit-rnd-select (fit-range 1 m) n))

  (fit-lotto-select 6 49)
  > (23 1 17 33 21 37)
#+END_SRC

*** P25 (*) Generate a random permutation of the elements of a list.
Hint: Use the solution of problem P23.

#+BEGIN_SRC emacs-lisp
  (defun fit-rnd-permu (lst)
    (fit-rnd-select lst (length lst)))

  (fit-rnd-permu (fit-range 1 10))
  > (9 4 1 5 3 2 8 7 6 10)
#+END_SRC

*** P26 (**) Generate the combinations of K distinct objects chosen from the N elements of a list
In how many ways can a committee of 3 be chosen from a group of 12 people? We all know that there are C(12,3) = 220 possibilities (C(N,K) denotes the well-known binomial coefficients). For pure mathematicians, this result may be great. But we want to really generate all the possibilities in a list.

*** P27 (**) Group the elements of a set into disjoint subsets.
**** a) In how many ways can a group of 9 people work in 3 disjoint subgroups of 2, 3 and 4 persons? Write a function that generates all the possibilities and returns them in a list.

**** b) Generalize the above predicate in a way that we can specify a list of group sizes and the predicate will return a list of groups.

Note that we do not want permutations of the group members; i.e. ((ALDO BEAT) ...) is the same solution as ((BEAT ALDO) ...). However, we make a difference between ((ALDO BEAT) (CARLA DAVID) ...) and ((CARLA DAVID) (ALDO BEAT) ...).

You may find more about this combinatorial problem in a good book on discrete mathematics under the term "multinomial coefficients".

*** P29 (**) Sorting a list of lists according to length of sublists.
**** a) We suppose that a list contains elements that are lists themselves. The objective is to sort the elements of this list according to their length. E.g. short lists first, longer lists later, or vice versa.

**** b) Again, we suppose that a list contains elements that are lists themselves. But this time the objective is to sort the elements of this list according to their length frequency; i.e., in the default, where sorting is done ascendingly, lists with rare lengths are placed first, others with a more frequent length come later.

Note that in the above example, the first two lists in the result have length 4 and 1, both lengths appear just once. The third and forth list have length 3 which appears twice (there are two list of this length). And finally, the last three lists have length 2. This is the most frequent length.

** Arithmetic
算法
*** P31 (**) Determine whether a given integer number is prime.
判断一个整数不是素数。

#+BEGIN_SRC emacs-lisp
  (defun fit-primep (num)
    (let ((n (sqrt num)))
      (labels ((rec (i)
                    (if (> i n)
                        t
                      (and (not (zerop (mod num i)))
                           (rec (+ i 1))))))
        (rec 2))))
  ;; 求 1 - 1000 之中的素数。
  (mapcar #'(lambda (x)
              (list x (fit-primep x)))
          (fit-range 1 1000))
#+END_SRC

*** P32 (**) Determine the greatest common divisor of two positive integer numbers.
求两个数的最大公约数。

Use Euclid's algorithm.

#+BEGIN_SRC emacs-lisp
  (defun fit-gcd (m n)
    (if (zerop n)
        m
      (fit-gcd n (mod m n))))

  (fit-gcd 48 36)
  > 12
#+END_SRC

*** P33 (*) Determine whether two positive integer numbers are coprime.
判断两个数是否互质。

Two numbers are coprime if their greatest common divisor equals 1.

#+BEGIN_SRC emacs-lisp
  (defun fit-coprime (m n)
    (= (fit-gcd m n) 1))

  (fit-coprime 3 7)
  > t
#+END_SRC

*** P34 (**) Calculate Euler's totient function phi(m).
Euler's so-called totient function phi(m) is defined as the number of positive integers r (1 <= r < m) that are coprime to m.
#+BEGIN_EXAMPLE
Example: m = 10: r = 1,3,7,9; thus phi(m) = 4. Note the special case: phi(1) = 1.
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  (defun fit-totoent-phi (m)
    (labels ((rec (i count)
                  (cond ((> i m) count)
                        ((fit-coprime m i) (rec (+ i 1) (+ count 1)))
                        (t (rec (+ i 1) count)))))
      (rec 1 0)))
  (fit-totoent-phi 49)
#+END_SRC

Find out what the value of phi(m) is if m is a prime number. Euler's totient function plays an important role in one of the most widely used public key cryptography methods (RSA). In this exercise you should use the most primitive method to calculate this function (there are smarter ways that we shall discuss later).

*** P35 (**) Determine the prime factors of a given positive integer.
Construct a flat list containing the prime factors in ascending order.



*** P36 (**) Determine the prime factors of a given positive integer (2).
Construct a list containing the prime factors and their multiplicity.

Hint: The problem is similar to problem P13.

*** P37 (**) Calculate Euler's totient function phi(m) (improved).
See problem P34 for the definition of Euler's totient function. If the list of the prime factors of a number m is known in the form of problem P36 then the function phi(m) can be efficiently calculated as follows: Let ((p1 m1) (p2 m2) (p3 m3) ...) be the list of prime factors (and their multiplicities) of a given number m. Then phi(m) can be calculated with the following formula:
phi(m) = (p1 - 1) * p1 ** (m1 - 1) + (p2 - 1) * p2 ** (m2 - 1) + (p3 - 1) * p3 ** (m3 - 1) + ...

Note that a ** b stands for the b'th power of a.

*** P38 (*) Compare the two methods of calculating Euler's totient function.
Use the solutions of problems P34 and P37 to compare the algorithms. Take the number of logical inferences as a measure for efficiency. Try to calculate phi(10090) as an example.

*** P39 (*) A list of prime numbers.
Given a range of integers by its lower and upper limit, construct a list of all prime numbers in that range.
*** P40 (**) Goldbach's conjecture.
Goldbach's conjecture says that every positive even number greater than 2 is the sum of two prime numbers. Example: 28 = 5 + 23. It is one of the most famous facts in number theory that has not been proved to be correct in the general case. It has been numerically confirmed up to very large numbers (much larger than we can go with our Prolog system). Write a predicate to find the two prime numbers that sum up to a given even integer.

*** P41 (**) A list of Goldbach compositions.
Given a range of integers by its lower and upper limit, print a list of all even numbers and their Goldbach composition.

In most cases, if an even number is written as the sum of two prime numbers, one of them is very small. Very rarely, the primes are both bigger than say 50. Try to find out how many such cases there are in the range 2..3000.


** Logic and Codes
*** P46 (**) Truth tables for logical expressions.
Define predicates and/2, or/2, nand/2, nor/2, xor/2, impl/2 and equ/2 (for logical equivalence) which succeed or fail according to the result of their respective operations; e.g. and(A,B) will succeed, if and only if both A and B succeed. Note that A and B can be Prolog goals (not only the constants true and fail).
A logical expression in two variables can then be written in prefix notation, as in the following example: and(or(A,B),nand(A,B)).

Now, write a predicate table/3 which prints the truth table of a given logical expression in two variables.

